BootStrap: docker
From: nvcr.io/nvidia/cuda:11.3.1-cudnn8-runtime-ubuntu18.04

%labels
    Maintainer DeepMind Technologies Limited, AlQuraishi Laboratory, Amazon.com, Inc.
    License Apache-2.0

%post
    # Update apt keys
    apt-key del 7fa2af80
    apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub
    apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub

    apt-get update && apt-get -y install apt-transport-https ca-certificates gnupg software-properties-common wget
    wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc > kitware.key
    apt-key add kitware.key
    apt-add-repository -y 'deb https://apt.kitware.com/ubuntu/ bionic main'


    # Install necessary packages
    apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \
        wget \
        libxml2 \
        cuda-minimal-build-11-3 \
        libcusparse-dev-11-3 \
        libcublas-dev-11-3 \
        libcusolver-dev-11-3 \
        git \
        awscli \
        build-essential \
        vim \
        g++ \
        gfortran \
        cmake \
        libsqlite3-dev \
        sip-dev \
        libtiff-dev \
        libfftw3-dev \
        libeigen3-dev \
        libboost-all-dev \
        libpng-dev \
        doxygen \
        swig \
        clustalw \
        cython3 \
        voronota \
        fuse \
	build-essential \
	software-properties-common \
	zlib1g-dev \
	libzstd-dev \
	liblzma-dev \
	libarchive-dev \
	liblzo2-dev \
	gcc && \
        rm -rf /var/lib/apt/lists/* && \
        apt-get autoremove -y && \
        apt-get clean

    # Set up arguments
    export OPENSTRUCTURE_VERSION="2.7.0"
    export SRC_FOLDER="/usr/local/src"
    export CPUS_FOR_MAKE=2
    
    # Install TMscore
    wget https://zhanggroup.org/TM-score/TMscore.cpp
    g++ -O3 -ffast-math -lm -o /usr/local/bin/TMscore TMscore.cpp
    rm TMscore.cpp

    # Install Miniconda
    wget -q -P /tmp -O /tmp/miniconda.sh \
        "https://repo.anaconda.com/miniconda/Miniconda3-py39_23.5.2-0-Linux-$(uname -m).sh" && \
        bash /tmp/miniconda.sh -b -p /opt/conda && \
        rm /tmp/miniconda.sh

    export PATH=/opt/conda/bin:$PATH

    # Clone and setup OpenFold
    git clone https://github.com/aqlaboratory/openfold.git /opt/openfold && \
    cd /opt/openfold && \
    git checkout 1d878a1203e6d662a209a95f71b90083d5fc079c

    # Install conda environment
    python --version
    pip install pip==23.2.1
    . /opt/conda/etc/profile.d/conda.sh
    conda activate base
    pip install -v pytorch_lightning==1.5.10
    sed -i 's/torch (>=1\.7\.\*)/torch >=1.7.0/' /opt/conda/lib/python3.9/site-packages/pytorch_lightning-1.5.10.dist-info/METADATA
    sed -i 's/torchtext (>=0\.8\.\*)/torchtext>=0.8.0/' /opt/conda/lib/python3.9/site-packages/pytorch_lightning-1.5.10.dist-info/METADATA
    sed -i 's/torchvision (>=0\.8\.\*)/torchvision>=0.8.0/' /opt/conda/lib/python3.9/site-packages/pytorch_lightning-1.5.10.dist-info/METADATA
    conda env update -n base --file /opt/openfold/environment.yml && \
    conda clean --all --force-pkgs-dirs --yes

    # Download required resources
    wget -q -P /opt/openfold/openfold/resources \
        https://git.scicore.unibas.ch/schwede/openstructure/-/raw/7102c63615b64735c4941278d92b554ec94415f8/modules/mol/alg/src/stereo_chemical_props.txt

    # Apply patch
    patch -p0 -d /opt/conda/lib/python3.9/site-packages/ < /opt/openfold/lib/openmm.patch

    # Install OpenFold
    cd /opt/openfold && \
    pip3 install --upgrade pip --no-cache-dir && \
    python3 setup.py install
    
    # Install mmseqs2
    conda install -c bioconda -c conda-forge mmseqs2 -y

    # Clone and install AlphaFlow
    git clone https://github.com/bjing2016/alphaflow.git /opt/alphaflow

    # Install AlphaFlow dependencies
    python -m pip install pandas==1.5.3 && \
    python -m pip install torch==1.12.1+cu113 -f https://download.pytorch.org/whl/torch_stable.html && \
    python -m pip install biopython==1.79 dm-tree==0.1.6 modelcif==0.7 ml-collections==0.1.0 scipy==1.7.1 absl-py einops && \
    python -m pip install pytorch_lightning==2.0.4 fair-esm mdtraj==1.9.9 wandb && \
    python -m pip install ratarmount[full] && \
    python -m pip install omegaconf && \
    python -m pip install numpy==1.21.2
   
    # INSTALL OST
    export LD_LIBRARY_PATH=/opt/conda/lib:$LD_LIBRARY_PATH
    cd ${SRC_FOLDER} && \
    wget -O openstructure-${OPENSTRUCTURE_VERSION}.tar.gz -nc https://git.scicore.unibas.ch/schwede/openstructure/-/archive/${OPENSTRUCTURE_VERSION}/openstructure-${OPENSTRUCTURE_VERSION}.tar.gz && \
    mkdir openstructure-${OPENSTRUCTURE_VERSION} && \
    tar xf openstructure-${OPENSTRUCTURE_VERSION}.tar.gz -C ${SRC_FOLDER}/openstructure-${OPENSTRUCTURE_VERSION} --strip-components=1 && \
    mkdir -p ${SRC_FOLDER}/openstructure-${OPENSTRUCTURE_VERSION}/build && \
    cd ${SRC_FOLDER}/openstructure-${OPENSTRUCTURE_VERSION}/build && \
    cmake .. -DOPTIMIZE=ON \
             -DENABLE_MM=OFF \
             -DCOMPILE_TMTOOLS=1 \
             -DENABLE_GFX=ON \
             -DCMAKE_PREFIX_PATH=/opt/conda \
             -DENABLE_GUI=OFF \
             -DENABLE_INFO=OFF \
             -DCMAKE_C_FLAGS="-isystem /usr/include/boost/ -isystem ${OPENMM_INCLUDE_PATH}/include" \
             -DCMAKE_CXX_FLAGS="-isystem /usr/include/boost/ -isystem ${OPENMM_INCLUDE_PATH}/include" && \
    make -j ${CPUS_FOR_MAKE} && \
    wget https://files.wwpdb.org/pub/pdb/data/monomers/components.cif.gz && \
    stage/bin/chemdict_tool create components.cif.gz compounds.chemlib pdb && stage/bin/chemdict_tool update ../modules/conop/data/charmm.cif compounds.chemlib charmm && \
    cmake .. -DCOMPOUND_LIB=${SRC_FOLDER}/openstructure-${OPENSTRUCTURE_VERSION}/build/compounds.chemlib && \
    make -j ${CPUS_FOR_MAKE} && make install && \
    rm ${SRC_FOLDER}/openstructure-${OPENSTRUCTURE_VERSION}.tar.gz && \
    rm -rf ${SRC_FOLDER}/openstructure-${OPENSTRUCTURE_VERSION}

# Download weights as part of the image, so the cached image contains them and we don't re-download each time
# ESMFlow and ESM2
     mkdir -p /opt/params/alphafold
     mkdir -p /opt/params/esmfold
     chmod -R 777 /opt/params
     cd /opt/params/alphafold
     wget https://storage.googleapis.com/alphafold/alphafold_params_2022-12-06.tar
     tar -xvvvf alphafold_params_2022-12-06.tar
     cd /opt/params/esmfold
     wget https://dl.fbaipublicfiles.com/fair-esm/models/esmfold_3B_v1.pt

%environment
    export PATH=/opt/conda/bin:$PATH
    export PATH=/usr/local/bin:$PATH
    export OST_ROOT="/usr/local"
    export LD_LIBRARY_PATH=/usr/local/lib64:$LD_LIBRARY_PATH


%runscript
    exec "$@"
